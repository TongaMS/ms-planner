generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  clients  Client[]
  projects Project[]
  people   Person[]
}

model Client {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  harvestId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant   Tenant    @relation(fields: [tenantId], references: [id])
  projects Project[]

  @@index([tenantId])
}

model Project {
  id          String   @id @default(cuid())
  tenantId    String
  clientId    String
  name        String?
  harvestId   Int?     @unique
  harvestName String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  client    Client     @relation(fields: [clientId], references: [id])
  rolePlans RolePlan[] // <-- back relation

  @@index([tenantId])
  @@index([clientId])
}

model Person {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id]) // ← restore this

  harvestId           Int?
  firstName           String
  lastName            String
  email               String?  @unique
  isActive            Boolean?
  weeklyCapacityHours Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relation for role assignments
  assignedRoles RolePlan[] @relation("PersonAssignedRoles")
}

model RolePlan {
  id        String  @id @default(cuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  roleName          String
  startDate         DateTime?
  endDate           DateTime?
  allocationPct     Int
  billable          Boolean
  expectedRateCents Int?
  notes             String?

  // assignment
  assignedPersonId String?
  assignedPerson   Person? @relation("PersonAssignedRoles", fields: [assignedPersonId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([assignedPersonId])
}

model SyncState {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  updatedAt DateTime @updatedAt
}
