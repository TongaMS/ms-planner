generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  clients   Client[]
  projects  Project[]
  people    Person[]
}

model Client {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  harvestId Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  projects  Project[]

  @@index([tenantId])
}

model Project {
  id          String     @id @default(cuid())
  tenantId    String
  clientId    String
  name        String?
  harvestId   Int?       @unique
  harvestName String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  client      Client     @relation(fields: [clientId], references: [id])
  rolePlans   RolePlan[]  // <-- back relation

  @@index([tenantId])
  @@index([clientId])
}

model Person {
  id                   String   @id @default(cuid())
  tenantId             String
  firstName            String
  lastName             String
  email                String   @unique
  isActive             Boolean  @default(true)
  harvestId            Int?
  skills               Json?    // was String[] (SQLite doesn't support scalar lists)
  weeklyCapacityHours  Int?

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  tenant               Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model RolePlan {
  id                String   @id @default(cuid())
  projectId         String
  roleName          String
  startDate         DateTime?
  endDate           DateTime?
  allocationPct     Int       @default(100) // 0-100
  billable          Boolean   @default(true)
  expectedRateCents Int?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  project           Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model SyncState {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String?
  updatedAt DateTime @updatedAt
}
